name: Deploy BigCommerce Theme

on:
  workflow_dispatch:
  push:
    branches:
      - main   # adjust if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14.21.3'  # Using version compatible with stencil-utils

      - name: Install dependencies
        run: |
          npm install -g npm@8
          # Remove old lock file and regenerate it to match package.json
          rm -f package-lock.json
          npm install --legacy-peer-deps
          # Fix any vulnerabilities that can be automatically resolved
          npm audit fix --legacy-peer-deps || echo "Some vulnerabilities could not be automatically fixed"
          
      - name: Install Stencil CLI
        run: npm install -g @bigcommerce/stencil-cli@latest
        
      - name: Build theme
        run: |
          # Clean any previous builds
          rm -rf dist/
          
          # Build the theme
          npx webpack --config webpack.prod.js
          
          # Ensure parsed directory exists
          mkdir -p parsed/
          
          # Run stencil bundle to generate parsed templates
          stencil bundle || echo "Stencil bundle completed with warnings"
          
          # Verify parsed templates were generated
          if [ ! "$(ls -A parsed/ 2>/dev/null)" ]; then
            echo "Error: No parsed templates were generated!"
            echo "Contents of template directory:"
            ls -la templates/
            exit 1
          fi
          
      - name: Package theme
        run: |
          mkdir -p dist
          
          # List all files to debug
          echo "Current directory contents:"
          ls -la
          
          # Verify required directories exist
          echo "\nChecking for required directories:"
          for dir in assets/ templates/ lang/ config.json; do
            if [ ! -e "$dir" ]; then
              echo "Error: Missing required directory/file: $dir"
              exit 1
            fi
            echo "- $dir: $(ls -la $dir | wc -l) items"
          done
          
          # Verify parsed templates were generated
          if [ ! -d "parsed" ] || [ -z "$(ls -A parsed/ 2>/dev/null)" ]; then
            echo "Error: No parsed templates found in 'parsed/' directory"
            echo "Trying to generate them now..."
            stencil bundle || {
              echo "Failed to generate parsed templates"
              exit 1
            }
          fi
          
          # Create a temporary directory for packaging
          PACKAGE_DIR="$RUNNER_TEMP/theme-package"
          mkdir -p "$PACKAGE_DIR"
          
          # Copy only the necessary files
          echo "\nCopying theme files..."
          cp -r assets/ "$PACKAGE_DIR/"
          cp -r config.json "$PACKAGE_DIR/"
          cp -r templates/ "$PACKAGE_DIR/"
          cp -r lang/ "$PACKAGE_DIR/"
          cp -r parsed/ "$PACKAGE_DIR/" 2>/dev/null || echo "No parsed directory to copy"
          
          # Create zip of the theme
          echo "\nCreating theme.zip..."
          cd "$PACKAGE_DIR"
          zip -r "$GITHUB_WORKSPACE/dist/theme.zip" .
          
          # Verify the zip was created
          if [ ! -f "$GITHUB_WORKSPACE/dist/theme.zip" ]; then
            echo "Error: Failed to create theme.zip"
            exit 1
          fi
          
          echo "\nTheme packaged successfully!"
          ls -lh "$GITHUB_WORKSPACE/dist/"

      # 6️⃣ Verify that theme.zip exists
      - name: Verify theme.zip
        run: |
          ls -lh ./dist
          stat ./dist/theme.zip
      # 7️⃣ Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 8️⃣ Upload theme to BigCommerce
      - name: Upload theme to BigCommerce
        env:
          BC_API_TOKEN: ${{ secrets.BC_API_TOKEN }}
          BC_STORE_HASH: ${{ secrets.BC_STORE_HASH }}
        run: |
          ZIP=$GITHUB_WORKSPACE/dist/theme.zip
          
          # Verify the zip file exists and has content
          if [ ! -f "$ZIP" ]; then
            echo "Error: theme.zip not found in dist directory"
            ls -la $GITHUB_WORKSPACE/dist/
            exit 1
          fi
          
          echo "File size of theme.zip: $(du -h $ZIP | cut -f1)"
          
          # Upload the theme
          echo "Uploading $ZIP to BigCommerce..."
          curl -v -X POST "https://api.bigcommerce.com/stores/${BC_STORE_HASH}/v3/themes" \
            -H "X-Auth-Token: ${BC_API_TOKEN}" \
            -H "Accept: application/json" \
            -F "file=@${ZIP}" \
            -o upload-response.json
            
          echo "Upload response:"
          cat upload-response.json
          
          # Check if upload was successful
          if [ ! -s "upload-response.json" ]; then
            echo "Error: Empty response from upload API"
            exit 1
          fi
          
          # Check for API errors
          if grep -q '"status"' upload-response.json; then
            STATUS=$(jq -r '.status' upload-response.json)
            if [ "$STATUS" != "null" ] && [ "$STATUS" -ge 400 ]; then
              echo "Error: Upload failed with status $STATUS"
              echo "Error details:"
              jq '.' upload-response.json
              exit 1
            fi
          fi

      # 9️⃣ Poll the upload job until completion
      - name: Process theme upload
        id: process-upload
        env:
          BC_API_TOKEN: ${{ secrets.BC_API_TOKEN }}
          BC_STORE_HASH: ${{ secrets.BC_STORE_HASH }}
        run: |
          # Extract job ID from the upload response
          JOB_ID=$(jq -r '.job_id' upload-response.json)
          
          if [ -z "$JOB_ID" ] || [ "$JOB_ID" = "null" ]; then
            echo "Error: No job_id found in upload response"
            echo "Upload response was:"
            cat upload-response.json
            exit 1
          fi
          
          echo "Job ID: $JOB_ID"
          
          # Poll the job status
          for i in {1..20}; do
            echo "\n[Attempt $i/20] Checking job status..."
            
            # Get job status with verbose output
            curl -v -X GET "https://api.bigcommerce.com/stores/${BC_STORE_HASH}/v3/themes/jobs/${JOB_ID}" \
              -H "X-Auth-Token: ${BC_API_TOKEN}" \
              -H "Accept: application/json" \
              -o job-status.json
              
            echo "Job status response:"
            cat job-status.json
            
            # Extract status and handle potential errors
            STATUS=$(jq -r '.data.status // .status // "UNKNOWN"' job-status.json)
            echo "Job status: $STATUS"
            
            case "$STATUS" in
              "COMPLETED")
                THEME_UUID=$(jq -r '.data.result.theme_uuid' job-status.json)
                if [ -n "$THEME_UUID" ] && [ "$THEME_UUID" != "null" ]; then
                  echo "Theme processed successfully!"
                  echo "Theme UUID: $THEME_UUID"
                  echo "THEME_UUID=$THEME_UUID" >> $GITHUB_ENV
                  exit 0
                else
                  echo "Error: Theme UUID not found in response"
                  exit 1
                fi
                ;;
                
              "FAILED")
                echo "Error: Theme upload job failed!"
                echo "Error details:"
                jq '.data.errors // .' job-status.json
                exit 1
                ;;
                
              "WORKING" | "QUEUED" | "PROCESSING")
                echo "Job in progress. Waiting 10 seconds..."
                sleep 10
                ;;
                
              *)
                echo "Unexpected status: $STATUS"
                echo "Full response:"
                cat job-status.json
                exit 1
                ;;
            esac
          done
          
          echo "Error: Job did not complete within the expected time"
          exit 1

      # 🔟 Publish the theme
      - name: Publish theme
        if: steps.process-upload.outcome == 'success'
        env:
          BC_API_TOKEN: ${{ secrets.BC_API_TOKEN }}
          BC_STORE_HASH: ${{ secrets.BC_STORE_HASH }}
        run: |
          echo "Publishing theme with UUID: ${{ env.THEME_UUID }}"
          
          # Publish the theme
          curl -v -X PUT "https://api.bigcommerce.com/stores/${BC_STORE_HASH}/v3/themes/${{ env.THEME_UUID }}/actions/publish" \
            -H "X-Auth-Token: ${BC_API_TOKEN}" \
            -H "Accept: application/json" \
            -o publish-response.json
            
          echo "Publish response:"
          cat publish-response.json
          
          # Check for errors in the publish response
          if jq -e '.status >= 400' publish-response.json >/dev/null 2>&1; then
            echo "Error: Failed to publish theme"
            jq '.' publish-response.json
            exit 1
          fi
          
          echo "\n🎉 Theme successfully published!"
