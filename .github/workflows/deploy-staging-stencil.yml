name: Deploy BigCommerce Theme

on:
  workflow_dispatch:
  push:
    branches:
      - main   # adjust if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.20.2'  # Using LTS version known to work with Stencil CLI

      - name: Install dependencies
        run: |
          npm install -g npm@8
          npm ci --legacy-peer-deps
          
      - name: Install Stencil CLI
        run: npm install -g @bigcommerce/stencil-cli@latest
        
      - name: Build theme
        run: |
          # Install specific versions of webpack and webpack-cli that are known to work
          npm install --save-dev webpack@4.47.0 webpack-cli@4.10.0
          
          # Build the theme
          npx webpack --config webpack.prod.js || echo "Webpack build failed, but continuing..."
          
          # Run stencil bundle
          stencil bundle || echo "Stencil bundle failed, but continuing..."
          
      - name: Package theme
        run: |
          mkdir -p dist
          # List all files to debug
          echo "Current directory contents:"
          ls -la
          
          echo "\nChecking for theme files:"
          ls -la assets/dist/ 2>/dev/null || echo "No assets/dist directory found"
          
          # Create zip of the theme
          echo "\nCreating theme.zip..."
          zip -r dist/theme.zip . -x \
            "*.git*" \
            "*.github/*" \
            "node_modules/*" \
            "dist/*" \
            ".DS_Store" \
            "*.log" \
            "*.md" \
            "*.lock" \
            "*.editorconfig" \
            "*.gitignore" \
            "*.eslintrc" \
            "*.prettierrc" \
            "*.babelrc" \
            "*.npmrc" \
            "*.yarnrc" \
            "*.env*" \
            "*.example" \
            "*~"

      # 6Ô∏è‚É£ Verify that theme.zip exists
      - name: Verify theme.zip
        run: |
          ls -lh ./dist
          stat ./dist/theme.zip

      # 7Ô∏è‚É£ Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 8Ô∏è‚É£ Upload theme to BigCommerce
      - name: Upload theme
        env:
          BC_API_TOKEN: ${{ secrets.BC_API_TOKEN }}
          BC_STORE_HASH: ${{ secrets.BC_STORE_HASH }}
        run: |
          ZIP=$GITHUB_WORKSPACE/dist/theme.zip
          curl -s -X POST "https://api.bigcommerce.com/stores/${BC_STORE_HASH}/v3/themes" \
            -H "X-Auth-Token: ${BC_API_TOKEN}" \
            -H "Accept: application/json" \
            -F "file=@${ZIP}" \
            -o upload-response.json
          cat upload-response.json

      # 9Ô∏è‚É£ Poll the upload job until completion
      - name: Wait for theme upload
        env:
          BC_API_TOKEN: ${{ secrets.BC_API_TOKEN }}
          BC_STORE_HASH: ${{ secrets.BC_STORE_HASH }}
        run: |
          JOB_ID=$(jq -r '.job_id' upload-response.json)
          if [ -z "$JOB_ID" ] || [ "$JOB_ID" = "null" ]; then
            echo "Upload failed, no job_id returned!"
            exit 1
          fi

          for i in {1..20}; do
            STATUS=$(curl -s -X GET "https://api.bigcommerce.com/stores/${BC_STORE_HASH}/v3/themes/jobs/${JOB_ID}" \
              -H "X-Auth-Token: ${BC_API_TOKEN}" \
              -H "Accept: application/json" | jq -r '.data.status')
            echo "Job status: $STATUS"
            if [ "$STATUS" = "COMPLETED" ]; then
              THEME_UUID=$(curl -s -X GET "https://api.bigcommerce.com/stores/${BC_STORE_HASH}/v3/themes/jobs/${JOB_ID}" \
                -H "X-Auth-Token: ${BC_API_TOKEN}" \
                -H "Accept: application/json" | jq -r '.data.result.theme_uuid')
              echo "Theme UUID: $THEME_UUID"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Theme upload job failed!"
              exit 1
            else
              sleep 10
            fi
          done

          if [ -z "$THEME_UUID" ] || [ "$THEME_UUID" = "null" ]; then
            echo "Theme UUID not found after polling job status."
            exit 1
          fi

      # üîü Publish the theme
      - name: Publish theme
        env:
          BC_API_TOKEN: ${{ secrets.BC_API_TOKEN }}
          BC_STORE_HASH: ${{ secrets.BC_STORE_HASH }}
        run: |
          curl -s -X PUT "https://api.bigcommerce.com/stores/${BC_STORE_HASH}/v3/themes/${THEME_UUID}/actions/publish" \
            -H "X-Auth-Token: ${BC_API_TOKEN}" \
            -H "Accept: application/json" \
            -o publish-response.json
          cat publish-response.json
